package org.mac.sample.groovy.datatype

/*
 *          (          (
 *          )\ )  (    )\   )  )     (
 *  (  (   (()/( ))\( ((_| /( /((   ))\
 *  )\ )\   ((_))((_)\ _ )(_)|_))\ /((_)
 * ((_|(_)  _| (_))((_) ((_)__)((_|_))
 * / _/ _ \/ _` / -_|_-< / _` \ V // -_)
 * \__\___/\__,_\___/__/_\__,_|\_/ \___|
 *
 * 东隅已逝，桑榆非晚。(The time has passed,it is not too late.)
 * 虽不能至，心向往之。(Although I can't, my heart is longing for it.)
 *
 */
/**
 * 单引号所表示的字符串不会按照GString的类型来处理内容，等价于java
 * 的字符串；
 *
 * 双引号表示的意思与单引号表示的意思是等价的。如果字符串内容中包括没有
 * 被转义的$符号，那么它被加工成GString实例；
 *
 * 三组引号（或者是多行字符串）允许字符串的内容在多行出现，新的行总是被
 * 转换为“\n”，其他所有的空白字符都被完整的按照文本原样保留，多行字符串也许
 * 是一个GString实例，这根据是使用单引号或者多双引号而定，多行字符串事实上像
 * Ruby或者Perl中的HERE-document。
 *
 * “/”表示的字符串，指明字符串内容不转义反斜杠“\”，这在正则表达式
 * 的使用中特别有用，就象后面看到的那样，只有在一个反斜杠接下来是一个字符u的时
 * 候才需要进行转义
 *
 */
def name = 'Dierk'

def out = "Helle $name"

def preStr = '''
-----------------------------
1. name 
2. age
-----------------------------
'''

def preString = """
-----------------------------
1. name 
2. age
-----------------------------
"""


def reg = /\d+/

println name
println out
println preStr
println preString
println reg