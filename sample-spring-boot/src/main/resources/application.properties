#debug=true

server.port=8088

#Thymeleaf\u914D\u7F6E @see org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties

#######################################################################################
#   private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;
#
#	public static final String DEFAULT_PREFIX = "classpath:/templates/";
#
#	public static final String DEFAULT_SUFFIX = ".html";
#######################################################################################

#\u5F00\u53D1\u65F6\u7F13\u5B58\u7981\u7528
spring.thymeleaf.cache=false

#\u56FD\u9645\u5316
spring.messages.basename=i18n.message

#MVC\u65E5\u671F\u683C\u5F0F
spring.mvc.date-format=yyyy-MM-dd

#SpringBoot \u5D4C\u5165\u5F0FServlet\u5BB9\u5668
#@see org.springframework.boot.autoconfigure.web.ServerProperties
server.tomcat.uri-encoding=UTF-8

#JDBC\u8FDE\u63A5MySQL\u914D\u7F6E
#@see org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
########################################################################################################################
#    @Configuration
#	 @Conditional(PooledDataSourceCondition.class)
#	 @ConditionalOnMissingBean({ DataSource.class, XADataSource.class })
#    //\u81EA\u52A8\u914D\u7F6E\u5BFC\u5165\u6570\u636E\u6E90\u914D\u7F6E,SpringBoot2.0\u540E\u9ED8\u8BA4\u4F7F\u7528\u7684\u8FDE\u63A5\u6C60\u4E3AHikari
#	 @Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,
#			DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,
#			DataSourceJmxConfiguration.class })
#	 protected static class PooledDataSourceConfiguration {
#
#	 }
#
#    SpringBoot2.0\u540E\u9ED8\u8BA4\u4F7F\u7528\u7684\u8FDE\u63A5\u6C60\u4E3AHikari(havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true)
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration
#
#    @ConditionalOnClass(HikariDataSource.class)
#    @ConditionalOnMissingBean(DataSource.class)
#    @ConditionalOnProperty(name = "spring.datasource.type",
#                        havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true)
#    static class Hikari {
#
#        @Bean
#        @ConfigurationProperties(prefix = "spring.datasource.hikari")
#        public HikariDataSource dataSource(DataSourceProperties properties) {
#
#            HikariDataSource dataSource = createDataSource(properties,HikariDataSource.class);
#
#            if (StringUtils.hasText(properties.getName())) {
#                dataSource.setPoolName(properties.getName());
#            }
#            return dataSource;
#        }
#
#    }
########################################################################################################################
#    //DataSource\u81EA\u52A8\u88C5\u914D\u5B8C\u6210\u540E,Spring Boot\u53EF\u4EE5\u81EA\u52A8\u6267\u884C\u6570\u636E\u6E90\u521D\u59CB\u5316\u5DE5\u4F5C
#    //\u5373\u6839\u636E\u914D\u7F6E\u6307\u5B9A\u7684\u6587\u4EF6\u6267\u884C\u6570\u636E\u5E93\u521B\u5EFA\u811A\u672C\u6570\u636E\u63D2\u5165sql
#
#    @Import({ DataSourcePoolMetadataProvidersConfiguration.class,
#		DataSourceInitializationConfiguration.class })
#    public class DataSourceAutoConfiguration {...}
#
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceInitializationConfiguration
#    \u5176\u5411Spring\u5BB9\u5668\u4E2D\u6CE8\u518C\u4E86DataSourceInitializerInvoker\u548CDataSourceInitializerPostProcessor
#
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor
#    //Bean\u540E\u7F6E\u5904\u7406\u5668\u521D\u59CB\u5316DataSourceInitializerInvoker
#    <pre>this.beanFactory.getBean(DataSourceInitializerInvoker.class);</pre>
#
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker
#    \u800CDataSourceInitializerInvoker implements ApplicationListener InitializingBean
#
#    \u5373\u7528\u4E8E\u5904\u7406\u6570\u636E\u6E90\u521D\u59CB\u5316
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker.afterPropertiesSet()
#    \u521B\u5EFAcreateSchema
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer#initialize(DataSourceInitializer)
#    \u548Corg.springframework.boot.autoconfigure.jdbc.DataSourceInitializer#onApplicationEvent(DataSourceSchemaCreatedEvent)
#
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.createSchema()
#    @see org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.initSchema
#
#    //\u5373\u9ED8\u8BA4\u4ECE\u7C7B\u8DEF\u5F84\u4E0B\u52A0\u8F7Dschema.sql\u548Cdata.sql\u6587\u4EF6\u6216\u81EA\u5B9A\u4E49\u914D\u7F6E\u6307\u5B9A
#    <pre>
#        List<Resource> scripts = getScripts("spring.datasource.schema",
#				this.properties.getSchema(), "schema");
#        ......
#    </pre>
#    <pre>
#        List<Resource> scripts = getScripts("spring.datasource.data",
#				this.properties.getData(), "data");
#        ......
#    </pre>
########################################################################################################################
spring.datasource.url=jdbc:mysql://localhost:3306/samples?useSSL=false
spring.datasource.username=root
spring.datasource.password=891028@root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.schema=classpath:sql/schema-mysql.sql
spring.datasource.data=classpath:sql/data-mysql.sql
#spring.datasource.initialization-mode=always

#\u5207\u6362\u5176\u4ED6\u6570\u636E\u6E90\u8FDE\u63A5\u6C60
#\u624B\u52A8\u914D\u7F6E @see org.mac.sample.spring.boot.web.config.DruidDataSourceConfiguration
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

#spring.datasource.initialSize= 5
#spring.datasource.minIdle=5
#spring.datasource.maxActive=20
#spring.datasource.maxWait=60000
#spring.datasource.timeBetweenEvictionRunsMillis=60000
#spring.datasource.minEvictableIdleTimeMillis=300000
#spring.datasource.validationQuery=SELECT 1 FROM DUAL
#spring.datasource.testWhileIdle=true
#spring.datasource.spring.datasource.testOnBorrow=false
#spring.datasource.testOnReturn=false
#spring.datasource.poolPreparedStatements=true
#\u914D\u7F6E\u76D1\u63A7\u7EDF\u8BA1\u62E6\u622A\u7684filters\uFF0C\u53BB\u6389\u540E\u76D1\u63A7\u754C\u9762sql\u65E0\u6CD5\u7EDF\u8BA1\uFF0C'wall'\u7528\u4E8E\u9632\u706B\u5899
#spring.datasource.filters=stat,wall
#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#spring.datasource.useGlobalDataSourceStat=true
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500

#\u4F7F\u7528druid-spring-boot-starter
#spring.datasource.druid.initial-size=5
#spring.datasource.druid.min-idle=5
#spring.datasource.druid.maxActive=20
#spring.datasource.druid.maxWait=60000
#spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
#spring.datasource.druid.minEvictableIdleTimeMillis=300000
#spring.datasource.druid.validationQuery=SELECT 1 FROM DUAL
#spring.datasource.druid.testWhileIdle=true
#spring.datasource.druid.testOnBorrow=false
#spring.datasource.druid.testOnReturn=false
#spring.datasource.druid.poolPreparedStatements=true
#spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
#spring.datasource.druid.filters=stat,wall
#spring.datasource.druid.connectionProperties=druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
#spring.datasource.druid.web-stat-filter.enabled=true
#spring.datasource.druid.web-stat-filter.url-pattern=/*
#spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
#spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
#spring.datasource.druid.stat-view-servlet.allow=127.0.0.1,192.168.163.1
#spring.datasource.druid.stat-view-servlet.deny=192.168.1.73
#spring.datasource.druid.stat-view-servlet.reset-enable=false
#spring.datasource.druid.stat-view-servlet.login-username=admin
#spring.datasource.druid.stat-view-servlet.login-password=123456


#Spring Boot\u9ED8\u8BA4\u81EA\u52A8\u88C5\u914DJdbcTemplate\u64CD\u4F5C\u6570\u636E